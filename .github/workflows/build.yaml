name: Build
on:
  push:
    branches:
      - main
      - test
    tags:
      - v*

env:
  REGISTRY_PATH: ${{ github.workspace }}/registry
  CACHE_PATH: /tmp/.buildx-cache

jobs:
  setup:
    uses: ./.github/workflows/setup.yaml
    with:
      default_tag_version: "latest"
      build_platforms: "linux/amd64,linux/arm64"
      image_registries: "ghcr.io"

  build-images:
    runs-on: ubuntu-latest
    needs: ["setup"]
    strategy:
      matrix:
        platform: ${{ fromJson(needs.setup.outputs.dist_matrix) }}

    steps:
      - name: Setup Job Variables
        id: set-build-variables
        run: |
          echo "PLATFORM_OS=$(echo ${{ matrix.platform }} |  cut -d/ -f1)" >> $GITHUB_OUTPUT
          echo "PLATFORM_ARCH=$(echo ${{ matrix.platform }} |  cut -d/ -f2)" >> $GITHUB_OUTPUT

      - name: checkout repo
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # pin@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18 #pin@v2.1.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325 #pin@v2.2.1
        with:
          driver-opts: network=host

      - uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 #pin@v3.5.1
        with:
          node-version: 18

      # - name: Create Backstage application
      #   run: |
      #     echo backstage | npx @backstage/create-app
      #     cp ./Dockerfile ./.dockerignore ./backstage/

      - name: Create Backstage application
        run: |
          mkdir backstage
          cp ./Dockerfile ./.dockerignore

      - name: Start Docker registry
        run: |
          docker run --rm --detach --publish 5000:5000 \
            --volume ${REGISTRY_PATH}:/var/lib/registry \
            --name registry registry:2

      - name: Build container image
        uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5 #pin@v3.2.0
        with:
          context: backstage
          file: Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            localhost:5000/${{ needs.setup.outputs.repository_name }}:latest-${{ steps.set-build-variables.outputs.PLATFORM_OS }}-${{ steps.set-build-variables.outputs.PLATFORM_ARCH }}
            localhost:5000/${{ needs.setup.outputs.repository_name }}:${{ needs.setup.outputs.image_tag }}-${{ steps.set-build-variables.outputs.PLATFORM_OS }}-${{ steps.set-build-variables.outputs.PLATFORM_ARCH }}

      - name: Stop Docker registry
        run: docker stop registry

      - name: Upload Docker registry data for testing
        uses: actions/upload-artifact@v3
        with:
          name: docker-registry-data
          path: ${{ env.REGISTRY_PATH }}/

  push-images:
    runs-on: ubuntu-latest
    needs: ["setup", "build-images"]
    strategy:
      matrix:
        registry: ${{ fromJson(needs.setup.outputs.registry_matrix) }}
        platform: ${{ fromJson(needs.setup.outputs.dist_matrix) }}
        include:
          - registry: ghcr.io
            username: GHCR_USERNAME
            password: GITHUB_TOKEN

    steps:
      - name: Setup Job Variables
        id: set-job-variables
        run: |
          echo "PLATFORM_DASH=$(echo ${{ matrix.platform }} | sed -e 's/\//-/g')" >> $GITHUB_OUTPUT

      - name: Download Docker registry data from build job
        uses: actions/download-artifact@v3
        with:
          name: docker-registry-data
          path: ${{ env.REGISTRY_PATH }}

      - name: Start Docker registry
        run: |
          docker run --rm --detach --publish 5000:5000 \
            --volume ${REGISTRY_PATH}:/var/lib/registry \
            --name registry registry:2
          sleep 10

      - name: Import Docker images
        run: |
          for TAG in "latest ${{ needs.setup.outputs.image_tag }}"; do
            docker pull --platform ${{ matrix.platform }} localhost:5000/${{ needs.setup.outputs.repository_name }}:$TAG-${{ steps.set-job-variables.outputs.PLATFORM_DASH }}
          done

      - name: Log in to Registry
        uses: redhat-actions/podman-login@632d91dfe19e1b55833cb708786bfbad2c2a0335 #pin@v3.2.0
        with:
          registry: ${{ matrix.registry }}
          username: ${{ vars[matrix.username] }}
          password: ${{ secrets[matrix.password] }}

      - name: Push images
        shell: bash
        run: |
          IMAGE_REPOSITORY="${{ matrix.registry }}/${{ needs.setup.outputs.repository_name }}"

          for TAG in "latest ${{ needs.setup.outputs.image_tag }}"; do
            docker tag localhost:5000/${{ needs.setup.outputs.repository_name }}:$TAG-${{ steps.set-job-variables.outputs.PLATFORM_DASH }} $IMAGE_REPOSITORY:$TAG-${{ steps.set-job-variables.outputs.PLATFORM_DASH }}
          docker push $IMAGE_REPOSITORY:$TAG-${{ steps.set-job-variables.outputs.PLATFORM_DASH }}
          done

  process-image-manifests:
    runs-on: ubuntu-latest
    needs: ["setup", "push-images"]
    strategy:
      matrix:
        registry: ${{ fromJson(needs.setup.outputs.registry_matrix) }}
        include:
          - registry: ghcr.io
            username: GHCR_USERNAME
            password: GITHUB_TOKEN
    steps:
      - name: Log in to Registry
        uses: redhat-actions/podman-login@632d91dfe19e1b55833cb708786bfbad2c2a0335 #pin@v3.2.0
        with:
          registry: ${{ matrix.registry }}
          username: ${{ vars[matrix.username] }}
          password: ${{ secrets[matrix.password] }}

      - name: Create manifests
        shell: bash
        run: |
          IMAGE_REPOSITORY="${{ matrix.registry }}/${{ needs.setup.outputs.repository_name }}"
          TAGS="latest"
          if [[ "${{ needs.setup.outputs.image_tag }}" != "latest" ]]; then
            TAGS="$TAGS ${{ needs.setup.outputs.image_tag }}"
          fi

          for TAG in $TAGS; do \
            podman manifest create $IMAGE_REPOSITORY:$TAG
            for PLATFORM in ${{ needs.setup.outputs.image_platform_tags }}; do \
                podman manifest add $IMAGE_REPOSITORY:$TAG docker://$IMAGE_REPOSITORY:$TAG-$PLATFORM; \
            done
            podman manifest push $IMAGE_REPOSITORY:$TAG docker://$IMAGE_REPOSITORY:$TAG
          done
